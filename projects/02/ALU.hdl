CHIP ALU {
	IN 
		x[16], y[16],
		zx, // if zx then x = 0
		nx, // if nx then x = !x
		zy, // if zy then y = 0
		ny, // if ny then y = !y
		f, // if f then out = x + y else out = x & y
		no; // if no then out = !out

	OUT
		out[16],
		zr, // if out == 0 then zr = 1 else zr = 0
		ng; // if out < 0 then ng = 1 else ng = 0

	PARTS:
    // zx
    Mux16(a=x, b=false, sel=zx, out=zxout);
    // nx
    Not16(in=zxout, out=notzxout);
    Mux16(a=zxout, b=notzxout, sel=nx, out=nxout);
    
    // zx
    Mux16(a=y, b=false, sel=zy, out=zyout);
    // nx
    Not16(in=zyout, out=notzyout);
    Mux16(a=zyout, b=notzyout, sel=ny, out=nyout);

    // f
    Add16(a=nxout, b=nyout, out=addxy);
    And16(a=nxout, b=nyout, out=andxy);
    Mux16(a=andxy, b=addxy, sel=f, out=fout);

    // no
    Not16(in=fout, out=notfout);
    Mux16(a=fout, b=notfout, sel=no, out[0..7]=noout1, out[8..14]=noout2, out[15]=msb);

    // zr
    Or8Way(in=noout1, out=half1);
    Or8Way(in[0..6]=noout2, in[7]=msb, out=half2);
    Or(a=half1, b=half2, out=orout);
    Not(in=orout, out=zr);
    
    // ng
    Mux(a=false, b=true, sel=msb, out=ng);

    // out
    Mux16(a[0..7]=noout1, a[8..14]=noout2, a[15]=msb, b=false, sel=false, out=out);
}
